class Person
	
instance variables
	public name : Utils`String;
	public id : Utils`String;
	public tickets : set of (Ticket);
  public speaks : set of (Presentation);
  public designed : set of (Cloth);
  public workSchedule: inmap FashionShow to (set1 of (Event));
  public attendance : map FashionShow to (set of (Event));
  
  inv len id = 9;
  inv forall t in set tickets & t.owner.id = id;
  --inv forall p in set speaks & p in set rng attendance and exists ticket for that show
  inv forall c in set designed & c.designer.id = id;
  inv forall s in set dom attendance & exists t in set tickets & t.show = s;
  inv forall j in set dom workSchedule & exists w in set j.workers & w.id = id;
  
 operations
 
 --Constructor
 public Person: Utils`String * Utils`String ==> Person
 Person(name_,id_) == (
 	atomic(
 		name := name_; 
	 	id := id_; 
	 	tickets := {};
	 	speaks := {};
	 	designed := {};
	 	workSchedule := { |-> };
	 	attendance := { |-> };
	 );
 	 return self;
 	);
 
 --Add Ticket
 public addTicket: Ticket ==> ()
 addTicket(t) == (
 	tickets := tickets union {t};
 	attendance := attendance ++ {t.show |-> {}}
 	)
 pre t.owner = self and t not in set tickets							--PRE: Person is owner of ticket
 post (t in set tickets and t.show in set dom attendance);--POS: New Ticket in tickets and show in attendance schedule (per show)
  
 --Add Job
 public addJob: FashionShow * Event ==> ()
 addJob(s,e) == workSchedule := workSchedule ++ {s |-> ({e} union workSchedule(s))}
 pre isWorking(e.startTime,e.endTime,workSchedule) = false	--PRE: Job does not overlap another
 post exists task in set workSchedule(s) & task = e;				--POS: New Job was added to workSchedule
 
 --Cancel Attendment
 public cancelAttendment: Event ==> ()
 cancelAttendment(event) == (
 	dcl show : FashionShow := iota x in set dom attendance & exists e in set attendance(x) & e = event;
 	attendance := attendance ++ {show |-> (attendance(show) \ {event})};
 	event.freeSeat();
 )
 pre event in set dunion rng attendance				--Event must be in the attendance
 post event not in set dunion rng attendance;	--Event not in the attendance
 
 --Is Designer
 	public isDesigner: () ==> bool
 	isDesigner() ==  (
 		if(card designed = 0) 
 			then return true
 		else
 			return false);
 			
 	public updateWorkSchedule: inmap FashionShow to set1 of (Event) ==> ()
 	updateWorkSchedule(schedule) == (workSchedule := schedule);
 			
 	functions 	
 	--Is Working (Function)
 	public static isWorking: Utils`Date * Utils`Date * map FashionShow to (set1 of (Event)) -> bool
  isWorking(startD,endD,j) == (
 	exists events in set (rng j) & 
 		(exists event in set events & 
 			Utils`datesOverlap(event.startTime,event.endTime,startD,endD) = true)
 	)
 pre Utils`getDatePosition(startD,endD) = <Before>;	--PRE: start time < end time
end Person