class Person
	
instance variables
	public name : Utils`String;
	public id : nat1;
	public tickets : set of (Ticket);
  public speaks : set of (Presentation);
  public designed : set of (Cloth);
  public jobs: set of Event;
  public attendance : inmap FashionShow to (set of (Event));
  
  inv len name > 0;
  inv forall t in set tickets & t.owner.id = id;
  --inv forall p in set speaks & p in set rng attendance and exists ticket for that show
  inv forall c in set designed & c.designer.id = id;
  inv forall s in set dom attendance & exists t in set tickets & t.show = s;
  --inv forall j in set jobs & exists w in set j.workers & w.id = id;
  
 operations
 
 --Constructor
 public Person: Utils`String * nat ==> Person
 Person(name_,id_) == (
 	name := name_; 
 	id := id_; 
 	tickets := {};
 	speaks := {};
 	designed := {};
 	jobs := {};
 	attendance := {|->};
 	return self)
 	pre len name_ > 0;
 	
 --Get Notifications
 public getJobNotifications: Notification`Type ==> set of Notification
 getJobNotifications(type) == (
 	dcl notifications : set of Notification := {};
 	
 	if(type = <Workers>) then (
	 	for all event in set jobs do(
	 		notifications := notifications union event.getNotifications(<Workers>)
	 	);
 	)
 	else (
 		for all event in set dunion rng attendance do (
 			notifications := notifications union event.getNotifications(<Attendees>);
 		);
 	);
 	return notifications
 )
 post forall n in set RESULT & n.type = type;
 
 --Get Attendance Notifications
 public getAttendanceNotifications: FashionShow ==> set of Notification
 getAttendanceNotifications(show) == (
 	dcl notifications : set of Notification := {};
 	
 	for all event in set attendance(show) do (
 		notifications := notifications union event.getNotifications(<Attendees>)
 	);
 	
 	return notifications
 )
 pre show in set dom attendance
 post forall n in set RESULT & n.type = <Attendees>;
 
 --Add Ticket
 public addTicket: Ticket ==> ()
 addTicket(t) == (
 	tickets := tickets union {t};
 	attendance := attendance ++ {t.show |-> {}}
 	)
 pre t.owner = self and t not in set tickets							--PRE: Person is owner of ticket
 post (t in set tickets and t.show in set dom attendance);--POS: New Ticket in tickets and show in attendance schedule (per show)
  
 --Add Job
 public addJob: Event ==> ()
 addJob(e) == (jobs := jobs union {e})
 pre isWorking(e.startTime,e.endTime,jobs) = false	--PRE: Job does not overlap another
 post e in set jobs;																--POS: New Job was added to workSchedule
 
 --RemoveJob
 public removeJob: Event ==> ()
 removeJob(j) ==(jobs := jobs \ {j})
 pre j in set jobs					--PRE: Person has job
 post j not in set jobs;		--POS: Person dismissed from job
 
 --Attend
 public attend: Event ==> ()
 attend(event) == (
 	dcl show: FashionShow := iota x in set dom attendance & event in set x.events,
 			ticket: Ticket := iota x in set tickets & show = x.show;
 	attendance := attendance ++ {show |-> (attendance(show) union {event})};
 	if(ticket.type = <Normal> or ticket.type = <Guest>) then event.reserveSeat()
 )
 pre exists t in set tickets & event in set t.show.events and 	--PRE: Event belongs to a ticket show
 	event not in set attendance(t.show)														--PRE: Event is not reserved 
 post event in set dunion rng attendance;														--POS: Reservation to event with success
  
 --Cancel Attendment
 public cancelAttendment: Event ==> ()
 cancelAttendment(event) == (
 	if(event in set dunion rng attendance) then (
	 	dcl show : FashionShow := iota x in set dom attendance & exists e in set attendance(x) & e = event;
	 	attendance := attendance ++ {show |-> (attendance(show) \ {event})};
	 	event.freeSeat());
 )
 post event not in set dunion rng attendance;	--Event not in the attendance
 
 --AddCloth
 public addCloth: Cloth ==> ()
 addCloth(cloth) == (designed := designed union {cloth})
 pre cloth.designer.id = id and cloth not in set designed
 post cloth in set designed;
 
 --Is Designer
 	public isDesigner: () ==> bool
 	isDesigner() ==  (
 		if(card designed = 0) 
 			then return false
 		else
 			return true);
 			
 	functions 	
 	--Is Working (Function)
 	public static isWorking: Utils`Date * Utils`Date * set of Event -> bool
  isWorking(startD,endD,jobs) == (
 	exists event in set jobs & Utils`datesOverlap(event.startTime,event.endTime,startD,endD))
 	pre Utils`getDatePosition(startD,endD) = <Before>;	--PRE: start time < end time
end Person