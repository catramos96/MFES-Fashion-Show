class TestShowsManager is subclass of TestClass

instance variables
public manager: ShowsManager := new ShowsManager();

operations
 
 -- tests requirement R15
 public testAddShows: () ==> ()
 testAddShows() == (
 	dcl s1 : FashionShow, s2 : FashionShow, s3 : FashionShow, s4: FashionShow,
 			theme : seq of char := "theme",
 			d1: Util`Date, d2: Util`Date, d3: Util`Date, d4: Util`Date;
 	
 	d1 := mk_Util`Date(2017,02,24,10,30);
 	d2 := mk_Util`Date(2017,03,1,18,00);
 	d3 := mk_Util`Date(2017,03,5,18,00);
 	d4 := mk_Util`Date(2017,03,10,20,00);
 	 	
 	s1 := new FashionShow(theme, new Space("name1","addr1"), d1, d3, 50, 10, 10);
 	s2 := new FashionShow(theme, new Space("name1","addr1"), d2, d3, 50, 10, 10);		--time/address overlap (with s1) -> BREAK
 	s3 := new FashionShow(theme, new Space("name2","addr2"), d1, d2, 50, 10, 10);		--same show theme with time overlaps (with s1) ->BREAK
 	s4 := new FashionShow(theme, new Space("name1","addr1"), d3, d4, 50, 10, 10);		--address overlap (with s1)
 	
 	manager.addShow(s1);
 	-- 	manager.addShow(s1); --Duplicated -> BREAKS
  --	manager.addShow(s2); --Time and address overlap -->BREAK
 	--  manager.addShow(s3); --Same Theme with time overlaps -->BREAK
 	manager.addShow(s4); 	
 	
 	return
 );
 
 -- tests requirement R16
 public testRemoveShows: () ==> ()
 testRemoveShows() == (
 	dcl s1: FashionShow := new FashionShow("t1",new Space("name1","addr1"),mk_Util`Date(2017,02,20,10,00), mk_Util`Date(2017,02,26,11,00),50,10,10),
 			s2: FashionShow := new FashionShow("t2",new Space("name2","addr2"),mk_Util`Date(2017,02,20,10,00), mk_Util`Date(2017,02,26,11,00),50,10,10);
 	
	dcl stage: Stage := new Stage("B001", 200);
	dcl event1: Event := new Event("Keynote", stage, mk_Util`Date(2017,02,20,10,00), mk_Util`Date(2017,02,26,11,00));
	dcl person1: Person := new Person("name1", 1);
	
	s1.space.addStage(stage);
	s1.addEvent(event1);
	person1.buyTicket(s1, <Normal>);
	
	manager.addShow(s1);
	manager.addShow(s2);
	
	manager.removeShow(s1);
	manager.removeShow(s2);
	--manager.removeShow("t1");	--Already removed -> Doesn't Exits -> BREAK
	--manager.removeShow("a");	--Doesn't exist -> BREAK
 );
 
 private testGetSpaces: () ==> ()
 testGetSpaces() == (
 	dcl s1 : FashionShow, s2 : FashionShow,
 			theme : seq of char := "theme",
 			d1: Util`Date, d2: Util`Date, d3: Util`Date,
 			space1: Space, space2: Space;
 	
 	d1 := mk_Util`Date(2017,02,24,10,30);
 	d2 := mk_Util`Date(2017,03,5,18,00);
 	d3 := mk_Util`Date(2017,03,10,20,00);
 	 
 	space1 := new Space("name1","addr1");
 	space2 := new Space("name2","addr2");
 	
 	s1 := new FashionShow(theme, space1, d1, d2, 50, 10, 10);
 	s2 := new FashionShow(theme, space2, d2, d3, 50, 10, 10);
 	
 	manager.addShow(s1);
 	manager.addShow(s2);
 	
 	expecting(manager.getSpaces(), {space1, space2});
 );
 
 public static main: () ==> ()
 main() == (
 	dcl t : TestShowsManager := new TestShowsManager();
  t.testAddShows(); -- R15
  t.manager.reset();
  
  t.testRemoveShows(); -- R16
  t.manager.reset();
 
  t.testGetSpaces();
  t.manager.reset();
 );
 
end TestShowsManager