class TestFashionShow is subclass of TestClass

instance variables
	public show : FashionShow;
	
operations

	protected assert : bool ==> ()
		assert(a) == return
		pre a;
	
	public testConstructor:() ==> ()
	testConstructor() == (
		dcl space1 : Space := new Space("name1","address1"),
				space2 : Space := new Space("name2","address2");
		
		show := new FashionShow("theme",space1,mk_Util`Date(1,1,1,1,1),mk_Util`Date(1,1,1,1,2),10, 10, 10);
		assert(show.theme = "theme" and show.space = space1 and show.startTime = mk_Util`Date(1,1,1,1,1) and
					show.endTime = mk_Util`Date(1,1,1,1,2) and show.nEntries(<Normal>) = 10 and 
					show.nEntries(<VIP>) = 10 and show.nEntries(<Guest>) = 10);
									
		--show := new FashionShow("",space1,mk_Util`Date(1,1,1,1,1),mk_Util`Date(1,1,1,1,2),10, 10, 10); 			-->BREAKS (theme len = 0)												
		--show := new FashionShow("theme",space1,mk_Util`Date(1,1,1,1,2),mk_Util`Date(1,1,1,1,1),10, 10, 10);	-->BREAKS (end data before start date)											
		--show := new FashionShow("theme",space1,mk_Util`Date(1,1,1,1,1),mk_Util`Date(1,1,1,1,1),10, 10, 10);	-->BREAKS (end data same as start date)	
		
		assert(FashionShow`equals(show,show));
		assert(FashionShow`equals(show,new FashionShow("theme",space2,mk_Util`Date(2,2,2,2,2),mk_Util`Date(3,3,3,3,3),20, 30, 40)));						--same name
		assert(FashionShow`equals(show,new FashionShow("theme2",space2,mk_Util`Date(3,3,3,3,3),mk_Util`Date(4,4,4,4,4),20, 30, 40)) = false);	--different name
		
		assert(FashionShow`showsOverlap(show,show));
		--assert(FashionShow`showsOverlap(show,new FashionShow("theme2",space1,mk_Util`Date(1,1,1,1,1),mk_Util`Date(5,5,5,5,5),20, 30, 40)));-->BREAKS dates overlap on same address
		return
	);
	
	public testEventsManager: () ==> ()
	testEventsManager() == (
		dcl e1 : Event, e2 : Event, e3 : Event,
				s1 : Space := new Space("name1","address1"),
				st1: Stage , st2: Stage, st3 : Stage,
				p1 : Person, p2 : Person, p3 : Person, p4 : Person;
	
		show := new FashionShow("theme",new Space("name2","address"),mk_Util`Date(2017,01,01,10,00),mk_Util`Date(2017,02,01,10,00),10, 10, 100);
		
		--sets
		
		show.setSpace(s1);
		assert(show.space = s1);
		
		show.setTheme("t");
		assert(show.theme = "t");
		
		show.setNEntries(<Normal>,20);
		assert(show.nEntries(<Normal>) = 20);
		
		show.setTime(mk_Util`Date(2017,01,01,08,00),mk_Util`Date(2017,02,02,10,00)); -- Expand time limit
		assert(show.startTime =mk_Util`Date(2017,01,01,08,00) and show.endTime = mk_Util`Date(2017,02,02,10,00));
		
		--add Stages
		
		st1 := new Stage("stage1",100);
		st2 := new Stage("stage2",50);
		st3 := new Stage("stage3",20);
		
		s1.addStage(st1);
		s1.addStage(st2);
		s1.addStage(st3);
		--s1.addStage(new Stage(1000,"stage1")); -->BREAKS (stage with duplicated name = s1)
		
		e1 := new Event("name1", st1, mk_Util`Date(2017,01,01,10,00), mk_Util`Date(2017,01,01,16,00));
		e2 := new Event("name2", st2, mk_Util`Date(2017,01,01,16,00), mk_Util`Date(2017,01,01,20,00));
		e3 := new Event("name3", st3, mk_Util`Date(2017,01,02,10,00), mk_Util`Date(2017,01,02,16,00));
		
		--add Events
		
		show.addEvent(e1);
		show.addEvent(e2);
		show.addEvent(e3);
		--show.addEvent(new Event("name1", st2, mk_Util`Date(2017,01,01,10,00), mk_Util`Date(2017,01,01,16,00))); -->BREAKS (event with same name);
		--show.addEvent(new Event("name4", st1, mk_Util`Date(2017,01,01,12,00), mk_Util`Date(2017,01,01,17,00))); -->BREAKS (event in the same space at the same time);
		--show.addEvent(new Event("name5", st2, mk_Util`Date(2016,12,31,23,00), mk_Util`Date(2017,01,01,16,00))); -->BREAKS (event outside the show date limits);
			
		
		--buy tickets
		p1 := new Person("name1",1);
		p2 := new Person("name2",2);
		p3 := new Person("name3",3);
		p4 := new Person("name4",4);
		
		p1.buyTicket(show, <Normal>);
		p2.buyTicket(show, <Normal>);
		p1.attend(e1);
		p2.attend(e2);
		e1.addWorker(p3);
		e2.addWorker(p4);
		
		show.cancelEvent("name1");
		assert(e1 not in set show.events);
		assert(e1 not in set p1.attendance(show));
		assert(e1 not in set p3.jobs);
		
		show.space.removeStage(st2);
		assert(e2 not in set show.events);
		assert(e2 not in set p2.attendance(show));
		assert(st2 not in set show.space.stages);
		assert(e2 not in set p4.jobs);
		
		return
	);
	
 	-- tests requirement R18
	private testAddEvent: () ==> ()
	testAddEvent() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow1: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow1: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime1: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl startTime2: Util`Date := mk_Util`Date(1998,02,14,21,00);
 		dcl endTime2: Util`Date := mk_Util`Date(1998,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  
	  dcl event1: Event := new Event("Keynote", stage, startTime1, endTime1);
	  dcl event2: Event := new Event("Keynote", stage, startTime2, endTime2);
	  dcl event3: Event := new Event("Keynote", stage, startTime1, endTime1);
	  dcl show: FashionShow := new FashionShow("theme", space, startTimeShow1, endTimeShow1, 10, 10, 100);
	  
		space.addStage(stage);
		show.addEvent(event1);
		-- show.addEvent(event2); --> BREAKS (can't add an event that occurs outside the date interval of the show)
		-- show.addEvent(event3); --> BREAKS (can't add an event that ovelaps temporally with another in the same stage)
		
		expecting(show.events, {event1});
	);
	
 	-- tests requirement R18
	private testCancelEvent: () ==> ()
	testCancelEvent() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  
	  dcl event1: Event := new Event("Keynote", stage, startTime, endTime);
	  dcl event2: Event := new Event("ClosingKeynote", stage, startTime, endTime);
	  dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 100);
	  
		space.addStage(stage);
		show.addEvent(event1);
		show.cancelEvent("Keynote");
		-- show.cancelEvent("ClosingKeynote"); --> BREAKS (can't cancel an event that is not happening in this show)
		
		expecting(show.events, {});
	);
	
 	-- tests requirement R17
	private testBuyTicket: () ==> ()
	testBuyTicket() == (
 		dcl space: Space := new Space("name", "address");
 		dcl show: FashionShow := new FashionShow("theme", space, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 1, 10);
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);	
 	 	
 	 	person1.buyTicket(show, <Normal>);
 		-- show.buyTicket(person2, <Normal>); --> BREAKS (fashion show with maximum of 1 Normal ticket, and there is no Normal tickets left)
		
		expecting(card show.ticketsSold(<Normal>), 1);
		expecting(card person1.tickets, 1);
		expecting(show.ticketsSold(<Normal>), person1.tickets);
	);
	
	private testEquals: () ==> ()
	testEquals() == (
 		dcl space1: Space := new Space("name", "address");
 		dcl space2: Space := new Space("name", "address");
 		dcl show1: FashionShow := new FashionShow("theme", space1, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 10, 1);
 		dcl show2: FashionShow := new FashionShow("differentTheme", space2, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 10, 1);
 	
 		expecting(FashionShow`equals(show1, show1), true);
 		expecting(FashionShow`equals(show1, show2), false);
	);
	
 	-- tests Requirement R14
	private testGetAttendingDesigners: () ==> ()
	testGetAttendingDesigners() == (
 		dcl space: Space := new Space("name", "address");
 		dcl show: FashionShow := new FashionShow("theme", space, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 10, 1);
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);	
 		dcl cloth: Cloth := new Cloth(person1, "Coat", <Winter>);
 	 	
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		
 		person1.addCloth(cloth);
 		
		expecting(show.getAttendingDesigners(), {person1});
	);
	
 	-- tests Requirement R14
	private testGetAttendingDesignersToEvent: () ==> ()
	testGetAttendingDesignersToEvent() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);	
 	 	dcl person3: Person := new Person("name3", 2);	
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person2, "Coat", <Winter>);
 	 	
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person2.addCloth(cloth2);
 		
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		person3.buyTicket(show, <Normal>);
 		
		show.addEvent(event);
		
		person1.attend(event);
		person3.attend(event);
 		
		expecting(show.getAttendingDesignersToEvent(event), {person1});
	);
  
 	-- tests Requirement R14
	private testGetParticipatingDesigners: () ==> ()
	testGetParticipatingDesigners() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
	 	 	
	 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);	
 	 	dcl person3: Person := new Person("name3", 2);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person2, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person2.addCloth(cloth2);

 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		person3.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		runwayEvent.addWorker(person3);
		
		runwayEvent.addToSequence(cloth1, person3);
		runwayEvent.addToSequence(cloth2, person3);
 		
		expecting(show.getParticipatingDesigners(), {person1, person2});
	);
	
	private testGetWorkers: () ==> ()
	testGetWorkers() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 	 	
		space.addStage(stage);
		
		show.addEvent(event);
		
		event.addWorker(person1);
		event.addWorker(person2);
 		
		expecting(show.getWorkers(), {person1, person2});
	);
	
 	-- tests requirement R21
	private testInviteGuest: () ==> ()
	testInviteGuest() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 	 	dcl presentation: Presentation := new Presentation("Keynote", stage, startTime, endTime, "Opening");
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 10);
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 	 	
		space.addStage(stage);
		
		show.addEvent(presentation);
		
		show.inviteGuest(person1, presentation);
		show.inviteGuest(person2, nil);
 	 	
 	 	expecting(card show.ticketsSold(<Guest>), 2);
 	 	expecting(card person1.tickets, 1);
 	 	expecting(card person2.tickets, 1);
 	 	expecting(presentation.speakers, {person1});
	);
	
 	-- tests requirement R17
  private testSetNEntries: () ==> ()
  testSetNEntries() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  
	  dcl show: FashionShow := new FashionShow("theme", space, startTime, endTime, 10, 10, 10);
	  
	  show.setNEntries(<VIP>, 20);
	  show.setNEntries(<Normal>, 30);
	  show.setNEntries(<Guest>, 40);
	  
		expecting(show.nEntries(<VIP>), 20);
		expecting(show.nEntries(<Normal>), 30);
		expecting(show.nEntries(<Guest>), 40);
  );
  
 	-- tests requirement R20
  private testSetTheme: () ==> ()
  testSetTheme() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  
	  dcl show: FashionShow := new FashionShow("theme", space, startTime, endTime, 10, 10, 10);
	  
	  show.setTheme("newTheme");
	  
	  expecting(show.theme, "newTheme");
  );
  
  private testSetSpace: () ==> ()
  testSetSpace() == (
 		dcl space1: Space := new Space("name1", "address1");
 		dcl space2: Space := new Space("name2", "address1");
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  
	  dcl show: FashionShow := new FashionShow("theme", space1, startTime, endTime, 10, 10, 10);
	  
	  show.setSpace(space2);
	  
	  expecting(show.space, space2);
  );
  
 	-- tests requirement R20
  private testSetTime: () ==> ()
  testSetTime() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTimeEvent1: Util`Date := mk_Util`Date(1997,02,13,21,00);
 		dcl endTimeEvent1: Util`Date := mk_Util`Date(1997,02,13,21,55);
 		dcl startTimeEvent2: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTimeEvent2: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl startTimeEvent3: Util`Date := mk_Util`Date(1997,02,15,21,00);
 		dcl endTimeEvent3: Util`Date := mk_Util`Date(1997,02,15,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  
	  dcl event1: Event := new Event("Keynote", stage, startTimeEvent1, endTimeEvent1);
	  dcl event2: Event := new Event("Keynote", stage, startTimeEvent2, endTimeEvent2);
	  dcl event3: Event := new Event("Keynote", stage, startTimeEvent3, endTimeEvent3);
	  dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 100);
	  
	  dcl newStartTimeShow: Util`Date := mk_Util`Date(1997,02,12,20,55);
 		dcl newEndTimeShow: Util`Date := mk_Util`Date(1997,02,16,22,00);
 		
 		dcl impossibleStartTimeShow: Util`Date := mk_Util`Date(1997,02,14,20,55);
 		dcl impossibleEndTimeShow: Util`Date := mk_Util`Date(1997,02,14,22,00);
	  
		space.addStage(stage);
		show.addEvent(event1);
		show.addEvent(event2);
		show.addEvent(event3);
		
		show.setTime(newStartTimeShow, newEndTimeShow);
		-- show.setTime(newEndTimeShow, newStartTimeShow); --> BREAKS (start time must come before end time)
		-- show.setTime(impossibleStartTimeShow, impossibleEndTimeShow); --> BREAKS (all events must be contained within new start and end time)
		
		expecting(show.startTime, newStartTimeShow);
		expecting(show.endTime, newEndTimeShow);
  );
  
	public main:() ==> ()
	main() == (
		testConstructor();
		testEventsManager();
		testAddEvent(); -- R18
		testCancelEvent(); -- R18
		testBuyTicket(); -- R17
		testEquals();
		testGetAttendingDesigners(); -- R14
		testGetAttendingDesignersToEvent(); -- R14
		testGetParticipatingDesigners(); -- R14
		testGetWorkers();
		testInviteGuest(); -- R21
		testSetNEntries(); -- R17
		testSetTheme(); -- R20
		testSetSpace();
		testSetTime(); -- R20
	);
end TestFashionShow