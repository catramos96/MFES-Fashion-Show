class TestRunway is subclass of TestClass
operations
  -- tests requirement R22
	private testAddToSequence: () ==> ()
 	testAddToSequence() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 	 	
 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 		dcl cloth: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth);
 		
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		
		runwayEvent.addToSequence(cloth, person2);

	  expecting(len runwayEvent.models, 1);
	  expecting(runwayEvent.models(1).cloth, cloth);
	  expecting(runwayEvent.models(1).worker, person2);
 	);
 	
  -- tests requirement R22
 	private testRemoveFromSequence: () ==> ()
 	testRemoveFromSequence() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 	 	
 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 	 	dcl person3: Person := new Person("name3", 3);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person1.addCloth(cloth2);
 		
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		person3.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		runwayEvent.addWorker(person3);
		
		runwayEvent.addToSequence(cloth1, person2);
		runwayEvent.addToSequence(cloth2, person3);
	
		runwayEvent.removeFromSequence(mk_Runway`Model(person2, cloth1));
		
	  expecting(len runwayEvent.models, 1);
 	);
 	
  -- tests requirement R19
	private testDismissWorker: () ==> ()
 	testDismissWorker() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 	 	
 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 		dcl cloth: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth);
 		
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		
		runwayEvent.addToSequence(cloth, person2);
		
		runwayEvent.dismissWorker(person2);
	  
	  expecting(len runwayEvent.models, 0);
	  expectingNotIn(person2, runwayEvent.workers);
 	);
 	
 	
	private testRemoveWorkerModel: () ==> ()
 	testRemoveWorkerModel() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 	 	
 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 	 	dcl person3: Person := new Person("name3", 3);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person1.addCloth(cloth2);

 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		person3.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		runwayEvent.addWorker(person3);
		
		runwayEvent.addToSequence(cloth1, person2);
		runwayEvent.addToSequence(cloth2, person3);
		
		runwayEvent.dismissWorker(person2);
		-- runwayEvent.dismissWorker(person2); --> BREAKS (can't dismiss a person that is not working in this Event)
	  
	  expecting(len runwayEvent.models, 1);
 	);
 	
 	private testGetClothes: () ==> ()
 	testGetClothes() == (
 	
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 	 	
 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 	 	dcl person3: Person := new Person("name3", 3);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person1.addCloth(cloth2);
 		
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		person3.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		runwayEvent.addWorker(person3);
		
		runwayEvent.addToSequence(cloth1, person2);
		runwayEvent.addToSequence(cloth2, person3);
	
	  expecting(runwayEvent.getClothes(), {cloth1, cloth2});
 	);
 	
 	
 	private testGetDesigners: () ==> ()
 	testGetDesigners() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
 	 	
 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 	 	dcl person3: Person := new Person("name3", 3);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person1.addCloth(cloth2);
 		
 		person1.buyTicket(show, <Normal>);
 		person2.buyTicket(show, <Normal>);
 		person3.buyTicket(show, <Normal>);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		runwayEvent.addWorker(person3);
		
		runwayEvent.addToSequence(cloth1, person2);
		runwayEvent.addToSequence(cloth2, person3);
	
	  expecting(runwayEvent.getDesigners(), {person1});
 	);
 	
	private testEqualModels: () ==> ()
 	testEqualModels() == (
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person1, "Coat", <Winter>);
 		
 		dcl model1: Runway`Model := mk_Runway`Model(person1, cloth1);
 		dcl model2: Runway`Model := mk_Runway`Model(person1, cloth2);
 		dcl model3: Runway`Model := mk_Runway`Model(person2, cloth2);
 		dcl model4: Runway`Model := mk_Runway`Model(person1, cloth1);
 		
 		expecting(Runway`equalModels(model1, model1), true);
 		expecting(Runway`equalModels(model1, model4), true);
 		expecting(Runway`equalModels(model1, model2), false);
 		expecting(Runway`equalModels(model1, model3), false);
 		expecting(Runway`equalModels(model2, model3), false);
 	);
 	
 	public static main: () ==> ()
	main() == (
	  dcl t: TestRunway := new TestRunway();
	  t.testAddToSequence(); -- R22
	  t.testRemoveFromSequence(); -- R22
	  t.testDismissWorker(); -- R19
	  t.testRemoveWorkerModel();
	  t.testGetClothes();
	  t.testGetDesigners();
	  t.testEqualModels();
 	);
end TestRunway
