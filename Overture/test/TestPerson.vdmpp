class TestPerson is subclass of TestClass
operations
 	private testGetJobNotifications: () ==> ()
 	testGetJobNotifications() == (
 		dcl space: Space := new Space("name", "address");
 		dcl person: Person := new Person("name", 1);
 		dcl startTimeShow1: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow1: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime1: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl startTimeShow2: Util`Date := mk_Util`Date(1998,02,13,20,55);
 		dcl endTimeShow2: Util`Date := mk_Util`Date(1998,02,15,22,00);
 		dcl startTime2: Util`Date := mk_Util`Date(1998,02,14,21,00);
 		dcl endTime2: Util`Date := mk_Util`Date(1998,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  
	  dcl event1: Event := new Event("Keynote", stage, startTime1, endTime1);
	  dcl event2: Event := new Event("Keynote", stage, startTime2, endTime2);
	  dcl show1: FashionShow := new FashionShow("theme", space, startTimeShow1, endTimeShow1, 10, 10, 100);
	  dcl show2: FashionShow := new FashionShow("theme", space, startTimeShow2, endTimeShow2, 10, 10, 100);
	  
 	 	dcl notificationTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 	 	dcl notification1: Notification := new Notification("title", "Keynote started", notificationTime1, <Workers>);
 	 	dcl notification2: Notification := new Notification("title", "Keynote ended", notificationTime1, <Workers>);
 	 
 	  dcl notificationTime2: Util`Date := mk_Util`Date(1998,02,14,21,00);
 	  dcl notification3: Notification := new Notification("title", "Keynote started", notificationTime2, <Attendees>);
 	  dcl notification4: Notification := new Notification("title", "Keynote ended", notificationTime2, <Attendees>);
 	 
		space.addStage(stage);
		
		show1.addEvent(event1);
		event1.addWorker(person);
 	  event1.addNotification(notification1);
 	  event1.addNotification(notification2);
 	  
		show2.addEvent(event2);
		person.buyTicket(show2, <Normal>);
		person.attend(event2);
 	  event2.addNotification(notification3);
 	  event2.addNotification(notification4);
		
		expecting(person.getJobNotifications(), {notification1, notification2});
		expecting(person.getAttendeeNotifications(), {notification3, notification4});
 	);
 	
 	private testGetAttendanceNotifications: () ==> ()
 	testGetAttendanceNotifications() == (
 		dcl space: Space := new Space("name", "address");
 		dcl person: Person := new Person("name", 1);
 		dcl startTimeShow1: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow1: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime1: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl startTimeShow2: Util`Date := mk_Util`Date(1998,02,13,20,55);
 		dcl endTimeShow2: Util`Date := mk_Util`Date(1998,02,15,22,00);
 		dcl startTime2: Util`Date := mk_Util`Date(1998,02,14,21,00);
 		dcl endTime2: Util`Date := mk_Util`Date(1998,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  
	  dcl event1: Event := new Event("Keynote", stage, startTime1, endTime1);
	  dcl event2: Event := new Event("Keynote", stage, startTime2, endTime2);
	  dcl show1: FashionShow := new FashionShow("theme", space, startTimeShow1, endTimeShow1, 10, 10, 100);
	  dcl show2: FashionShow := new FashionShow("theme", space, startTimeShow2, endTimeShow2, 10, 10, 100);
	  
 	 	dcl notificationTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 	 	dcl notification1: Notification := new Notification("title", "Keynote started", notificationTime1, <Attendees>);
 	 	dcl notification2: Notification := new Notification("title", "Keynote ended", notificationTime1, <Attendees>);
 	 
 	  dcl notificationTime2: Util`Date := mk_Util`Date(1998,02,14,21,00);
 	  dcl notification3: Notification := new Notification("title", "Keynote started", notificationTime2, <Attendees>);
 	  dcl notification4: Notification := new Notification("title", "Keynote ended", notificationTime2, <Attendees>);
 	 
		space.addStage(stage);
		
		show1.addEvent(event1);
		person.buyTicket(show1, <Normal>);
		person.attend(event1);
 	  event1.addNotification(notification1);
 	  event1.addNotification(notification2);
 	  
		show2.addEvent(event2);
		person.buyTicket(show2,<Normal>);
		person.attend(event2);
 	  event2.addNotification(notification3);
 	  event2.addNotification(notification4);
		
		expecting(person.getAttendanceNotifications(show1), {notification1, notification2});
		expecting(person.getAttendanceNotifications(show2), {notification3, notification4});
 	);
 	
 	private testAddTicket: () ==> ()
 	testAddTicket() == (
 		dcl space: Space := new Space("name", "address");
 		dcl show: FashionShow := new FashionShow("theme", space, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 10, 10);
 		dcl person: Person := new Person("name", 1);
 		dcl ticket: Ticket := new Ticket(<Normal>, person, show);
 		
 		person.addTicket(ticket);
 		expectingIn(ticket, person.tickets); 		
 	);
 	
 	-- tests requirement R5
 	private testAddJob: () ==> ()
 	testAddJob() == (
 		dcl space: Space := new Space("name", "address");
 		dcl show: FashionShow := new FashionShow("theme", space, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 10, 10);
 		dcl person: Person := new Person("name", 1);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  dcl stage2: Stage := new Stage("B002", 200);
	  dcl event: Event := new Event("Keynote", stage, startTime, endTime);
	  dcl event2: Event := new Event("Keynote", stage2, startTime, endTime);
	  
 		person.addJob(event);
 		-- person.addJob(event2); --> BREAKS (can't add two jobs at the same time)
 		expectingIn(event, person.jobs); 		
 	);
 	
 	private testRemoveJob: () ==> ()
 	testRemoveJob() == (
 		dcl space: Space := new Space("name", "address");
 		dcl show: FashionShow := new FashionShow("theme", space, mk_Util`Date(1,1,1,1,1), mk_Util`Date(1,1,1,1,2), 10, 10, 10);
 		dcl person: Person := new Person("name", 1);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  dcl event: Event := new Event("Keynote", stage, startTime, endTime);
	  
 		person.addJob(event);
 		person.removeJob(event);
 		expectingNotIn(event, person.jobs);
 	);
 	
 	
 	private testAttend: () ==> ()
 	testAttend() == (
 		dcl space: Space := new Space("name", "address");
 		dcl person: Person := new Person("name", 1);
 		dcl startTimeShow1: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow1: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime1: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl startTimeShow2: Util`Date := mk_Util`Date(1998,02,13,20,55);
 		dcl endTimeShow2: Util`Date := mk_Util`Date(1998,02,15,22,00);
 		dcl startTime2: Util`Date := mk_Util`Date(1998,02,14,21,00);
 		dcl endTime2: Util`Date := mk_Util`Date(1998,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
	  
	  dcl event1: Event := new Event("Keynote", stage, startTime1, endTime1);
	  dcl event2: Event := new Event("Keynote", stage, startTime2, endTime2);
	  dcl show1: FashionShow := new FashionShow("theme", space, startTimeShow1, endTimeShow1, 10, 10, 100);
	  dcl show2: FashionShow := new FashionShow("theme", space, startTimeShow2, endTimeShow2, 10, 10, 100);
	  
		space.addStage(stage);
		
		show1.addEvent(event1);
		person.buyTicket(show1,<Normal>);
		person.attend(event1);
 	  
		show2.addEvent(event2);
		person.addTicket(new Ticket(<Guest>, person, show2));
		person.attend(event2);
		
		expecting({event1}, person.attendance(show1));
		expecting({event2}, person.attendance(show2));
 	);
 	
 	
 	private testCancelAttendment: () ==> ()
 	testCancelAttendment() == (
 		dcl space: Space := new Space("name", "address");
 		dcl person: Person := new Person("name", 1);
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
	  dcl stage: Stage := new Stage("B001", 200);
	  dcl event: Event := new Event("Keynote", stage, startTime, endTime);
	  dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 100);
		
		space.addStage(stage);
		show.addEvent(event);
		person.buyTicket(show, <Normal>);
		person.attend(event);
		person.cancelAttendment(event);
		
		expectingNotIn(event, person.attendance(show));
 	);
 	
 	private testAddCloth: () ==> ()
 	testAddCloth() == (
 		dcl person: Person := new Person("Designer", 1);
 		dcl cloth: Cloth := new Cloth(person, "Coat", <Winter>);
 		person.addCloth(cloth);
 		
 		expectingIn(cloth, person.designed);
 	);
 	
 	private testIsDesigner: () ==> ()
 	testIsDesigner() == (
 		dcl person: Person := new Person("Designer", 1);
 		dcl cloth: Cloth := new Cloth(person, "Coat", <Winter>);
 		
 		expecting(person.isDesigner(), false);
 		person.designed := {cloth};
 		expecting(person.isDesigner(), true);
 	);
 	
 	private testIsParticipantDesigner: () ==> ()
 	testIsParticipantDesigner() == (
 		dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
	 	 	
	 	 	dcl runwayEvent: Runway := new Runway("WinterRunway", stage, startTime, endTime);
 	 	
 		dcl person1: Person := new Person("name1", 1);
 	 	dcl person2: Person := new Person("name2", 2);	
 	 	dcl person3: Person := new Person("name3", 2);
 		dcl cloth1: Cloth := new Cloth(person1, "Coat", <Winter>);
 		dcl cloth2: Cloth := new Cloth(person2, "Coat", <Winter>);
 		
		space.addStage(stage);
		
 		person1.addCloth(cloth1);
 		person2.addCloth(cloth2);
 		
 		show.addEvent(runwayEvent);
		
		runwayEvent.addWorker(person1);
		runwayEvent.addWorker(person2);
		runwayEvent.addWorker(person3);
		
		runwayEvent.addToSequence(cloth1, person3);
		runwayEvent.addToSequence(cloth2, person3);
 		
 		expecting(person1.isParticipantDesigner(), {runwayEvent});
 	);
 	
 	private testCancelPresentation: () ==> ()
 	testCancelPresentation() == (
 	dcl space: Space := new Space("name", "address");
 		dcl startTimeShow: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTimeShow: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
	  dcl stage: Stage := new Stage("B001", 200);
 		dcl show: FashionShow := new FashionShow("theme", space, startTimeShow, endTimeShow, 10, 10, 1);
	 	 	
	 	 	dcl pres: Presentation := new Presentation("WinterRunway", stage, startTime, endTime,"subtheme");
	 	 	 		dcl person1: Person := new Person("name1", 1);
	 	 	 		dcl person2 : Person := new Person("n2",2);
	 	 	space.addStage(stage);
 	 	show.addEvent(pres);
 		pres.addSpeaker(person1);
 		pres.addSpeaker(person2);

 		expecting(pres in set person1.speaks,true);
 		expecting(pres in set person2.speaks,true);
 		
 		person1.cancelPresentation(pres);
 		person2.cancelPresentation(pres);
 		expecting(pres not in set person1.speaks,true);
 		expecting(pres not in set person2.speaks,true);
 	);
 	
 	private testIsWorking: () ==> ()
 	testIsWorking() == (
 		dcl startTime1: Util`Date := mk_Util`Date(1997,02,14,21,00);
 		dcl endTime1: Util`Date := mk_Util`Date(1997,02,14,21,55);
 		dcl startTime2: Util`Date := mk_Util`Date(1997,02,13,20,55);
 		dcl endTime2: Util`Date := mk_Util`Date(1997,02,15,22,00);
 		dcl startTime3: Util`Date := mk_Util`Date(2009,02,13,20,55);
 		dcl endTime3: Util`Date := mk_Util`Date(2009,02,15,22,00);
	  dcl stage: Stage := new Stage("B001", 200);
	  dcl event: Event := new Event("Keynote", stage, startTime1, endTime1);
 		dcl person: Person := new Person("name", 1);
 		
	  expecting(person.isWorking(startTime2, endTime2, {event},{}), true);
	  expecting(person.isWorking(startTime3, endTime3, {event},{}), false);
 	);
 	
 	
 	public static main: () ==> ()
	main() == (
	  dcl t: TestPerson := new TestPerson();
	  t.testGetJobNotifications();
	  t.testGetAttendanceNotifications();
	  t.testAddTicket();
	  t.testAddJob(); -- R5
	  t.testRemoveJob();
	  t.testAttend();
	  t.testCancelAttendment();
	  t.testAddCloth();
	  t.testIsDesigner();
	  t.testIsParticipantDesigner();
	  t.testIsWorking();
	  t.testCancelPresentation();
 	);

end TestPerson