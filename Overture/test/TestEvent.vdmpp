class TestEvent is subclass of TestClass
operations
  -- tests requirement R19
	private testAddWorker: () ==> ()
 	testAddWorker() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 200);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	
 	 dcl worker: Person := new Person("Person1", 111111111);
 	 
 	 event.addWorker(worker);
 	 -- event.addWorker(worker); --> BREAKS (can't add same worker twice)
 	 
 	 expecting(event.workers, {worker});
 	);
 	
  -- tests requirement R19
	private testDismissWorker: () ==> ()
 	testDismissWorker() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 200);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	
 	 dcl worker: Person := new Person("Person1", 111111111);
 	 
 	 event.addWorker(worker);
 	 event.dismissWorker(worker);
 	 
 	 expecting(event.workers, {});
 	 
 	 -- event.dismissWorker(worker); --> BREAKS (can't dismiss a person that is not working)
 	);
 	
 	private testGetNotifications: () ==> ()
 	testGetNotifications() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 200);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	 
 	 dcl notificationTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 	 dcl notification1: Notification := new Notification("title", "Keynote to start", notificationTime, <Workers>);
 	 dcl notification2: Notification := new Notification("title", "Keynote ended", notificationTime, <Attendees>);
 	
	 dcl workerNotifications: set of Notification;
	 dcl attendeeNotifications: set of Notification;
	 
	 event.news := {notification1, notification2};
	 workerNotifications := event.getNotifications(<Workers>);
	 attendeeNotifications := event.getNotifications(<Attendees>);
	 
	 expecting(workerNotifications, {notification1});
	 expecting(attendeeNotifications, {notification2});
 	);
 	
 	-- tests requirement 25
 	private testAddNotification: () ==> ()
 	testAddNotification() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 200);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	 
 	 dcl notificationTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 	 dcl notification1: Notification := new Notification("title", "Keynote started", notificationTime, <Attendees>);
 	 dcl notification2: Notification := new Notification("title", "Keynote ended", notificationTime, <Attendees>);
 	 
 	 event.addNotification(notification1);
 	 expecting(event.news, {notification1});
 	 
 	 event.addNotification(notification2);
 	 expecting(event.news, {notification1, notification2});
 	 
 	 -- event.addNotification(notification2); --> BREAKS (can't add same notification twice)
 	);
 	
 	private testRemoveNotification: () ==> ()
 	testRemoveNotification() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 200);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	 
 	 dcl notificationTime: Util`Date := mk_Util`Date(1997,02,14,21,00);
 	 dcl notification: Notification := new Notification("title", "Keynote started", notificationTime, <Attendees>);
 	 
 	 event.addNotification(notification);
 	 event.removeNotification(notification);
 	 expectingNotIn(notification, event.news);
 	 
 	 -- event.removeNotification(notification); --> BREAKS (can't remove a notification that doesn't exist)
 	);
 	
 	private testUpdateWorkers: () ==> ()
 	testUpdateWorkers() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 200);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	 
 	 dcl worker1: Person := new Person("Person1", 1);
 	 dcl worker2: Person := new Person("Person2", 2);
 	 
 	 dcl workerSet: set of Person := {worker1, worker2};
 	 event.updateWorkers(workerSet);
 	 
 	 expecting(event.workers, workerSet);
 	);
 	
	private testReserveSeat: () ==> ()
 	testReserveSeat() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 1);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	
 	 event.reserveSeat();
 	 -- event.reserveSeat(); --> BREAKS (can't reserve seat in a full stage);
 	 
 	 expecting(event.reserved, 1);
 	);
 		
	private testFreeSeat: () ==> ()
 	testFreeSeat() == (
	 dcl startTime: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime: Util`Date := mk_Util`Date(1997,02,14,21,55);
 	 dcl stage: Stage := new Stage("B001", 1);
 	 dcl event: Event := new Event("Keynote", stage, startTime, endTime);
 	
 	 event.reserveSeat();
 	 event.freeSeat();
 	 expecting(event.reserved, 0);
 	 -- event.freeSeat(); --> BREAKS (can't free seat in an empty stage);
 	);
 	
 	private testEventsOverlap: () ==> ()
 	testEventsOverlap() == (
	 dcl startTime1: Util`Date := mk_Util`Date(1997,02,14,20,55);
 	 dcl endTime1: Util`Date := mk_Util`Date(1997,02,14,21,55);
	 dcl startTime2: Util`Date := mk_Util`Date(1997,02,14,21,25);
 	 dcl endTime2: Util`Date := mk_Util`Date(1997,02,14,22,25);
 	 dcl stage1: Stage := new Stage("B001", 200);
 	 dcl stage2: Stage := new Stage("B002", 200);
 	 dcl event1: Event := new Event("Keynote", stage1, startTime1, endTime1);
 	 dcl event2: Event := new Event("Ending Keynote", stage1, startTime2, endTime2);
 	 dcl event3: Event := new Event("Ending Keynote", stage2, startTime2, endTime2);
 	 
 	 dcl overlap : bool := Event`eventsOverlap(event1, event2);
 	 dcl non_overlap : bool := Event`eventsOverlap(event1, event3);
 	 
 	 expecting(overlap, true); -- same stage
 	 expecting(non_overlap, false); -- different stage
 	);
 	
 	public static main: () ==> ()
	main() == (
	  dcl t: TestEvent := new TestEvent();
	  t.testAddWorker(); -- R19 and R5
	  t.testDismissWorker(); -- R19 and R6
	  t.testGetNotifications();
	  t.testAddNotification(); -- R25
	  t.testRemoveNotification();
	  t.testUpdateWorkers();
	  t.testReserveSeat();
	  t.testFreeSeat();
	  t.testEventsOverlap();
 	);
 	
end TestEvent