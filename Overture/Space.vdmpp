class Space
 ---------------------------------------------------------------------------
instance variables
	 public address : seq of char;
	 public name : seq of char;
	 public stages : set of Stage;
	 public reservations : set of FashionShow;
	 
	 inv len address > 0 and len name > 0 and		--INV: address and name > 0
	 not exists s1,s2 in set stages & 					--INV: different stages
	 s1<>s2 and Stage`equal(s1,s2);
	 inv not exists s1,s2 in set reservations & --INV: reservations can't overlap
	 s1<>s2 and FashionShow`showsOverlap(s1,s2);
 ---------------------------------------------------------------------------
operations
--Constructor
public Space: seq of char * seq of char ==> Space
Space(name_,address_) == (
	name := name_ ; 
	address := address_ ; 
	stages := {};
	reservations := {};
	return self)
pre len name_ > 0 and len address_ > 0			--PRE: name and address are > 0
post name = name_ and address = address_; --POS: name and address were set

--Add Reservation
public addReservation: FashionShow ==> ()
addReservation(show) == (reservations := reservations union {show})
pre forall s in set reservations & (FashionShow`showsOverlap(s,show) = false)	--PRE: Reservations can't overlap
post show in set reservations;																						--POS: Reservation with success

--Remove Reservation
public removeReservation: FashionShow ==> ()
removeReservation(show) == (reservations := reservations \ {show})
pre show in set reservations			--PRE: Show has reservation
post show not in set reservations;--POS: Reservation cancelled

--Add Stage
public addStage: Stage ==> ()
addStage(stage) == (stages := stages union {stage})
pre stage not in set stages and 									--PRE: Stage not in stages
not exists s in set stages & Stage`equal(s,stage)	--PRE: Doesn't exist a stage with the same name
post stage in set stages;													--POS: Stage was added

--Remove Stage
public removeStage: Stage ==> ()
removeStage(stage) == (
	for all s in set reservations do (
  	for all e in set s.events do (
  		if(Stage`equal(e.stage,stage)) then s.cancelEvent(e.name);
  	);
	);
	stages := stages \ {stage};
)
pre stage in set stages					--PRE: Stage in stages
post stage not in set stages;		--POS: Stage was removed

--Set Name
public setName: seq of char ==> ()
setName(name_) == (name := name_)
pre len name_ > 0				--PRE: name > 0
post name = name_;			--POS: name changed

--Set Address
public setAddress: seq of char ==> ()
setAddress(address_) == (address := address_)
pre len address_ > 0			--PRE: address > 0
post address = address_;	--POS: address changed

--Reset
public reset: () ==> ()
reset() == (reservations := {})
post reservations = {};
 ---------------------------------------------------------------------------
 functions
 
--Equal
public static equal: Space * Space -> bool
equal(s1,s2) == (s1.address = s2.address);
end Space