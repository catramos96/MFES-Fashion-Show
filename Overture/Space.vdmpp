/*
Class that represents a space
*/
class Space
 ---------------------------------------------------------------------------
instance variables
	 public address : seq of char;
	 public name : seq of char;
	 public stages : set of Stage;
	 public reservations : set of FashionShow;
	 
	 --INV: address and name > 0 and stages are different
	 inv len address > 0 and len name > 0 and	not exists s1,s2 in set stages & 			
	 s1<>s2 and Stage`equal(s1,s2);
	 
	 --INV: reservations can't overlap
	 inv not exists s1,s2 in set reservations & 
	 s1<>s2 and FashionShow`showsOverlap(s1,s2);
 ---------------------------------------------------------------------------
operations
/*
Constructor
PRE: name and address are > 0
POS: name and address were set
*/
public Space: seq of char * seq of char ==> Space
Space(name_,address_) == (
	name := name_ ; 
	address := address_ ; 
	stages := {};
	reservations := {};
	return self)
pre len name_ > 0 and len address_ > 0			
post name = name_ and address = address_; 

/*
Add Reservation
PRE: Reservations can't overlap
POS: Reservation with success
*/
public addReservation: FashionShow ==> ()
addReservation(show) == (reservations := reservations union {show})
pre forall s in set reservations & FashionShow`showsOverlap(s,show)=false	
post show in set reservations;

/*
Remove Reservation
PRE: Show has reservation
POS: Reservation cancelled
*/
public removeReservation: FashionShow ==> ()
removeReservation(show) == (reservations := reservations \ {show})
pre show in set reservations			
post show not in set reservations;

/*
Add Stage
PRE: Stage not in stages
PRE: Doesn't exist a stage with the same name
POS: Stage was added
*/
public addStage: Stage ==> ()
addStage(stage) == (stages := stages union {stage})
pre stage not in set stages and not exists s in set stages & Stage`equal(s,stage)	
post stage in set stages;													

/*
Remove Stage
PRE: Has Stage
POS: stage was removed
*/
public removeStage: Stage ==> ()
removeStage(stage) == (
	for all s in set reservations do (
  	for all e in set s.events do (
  		if(Stage`equal(e.stage,stage)) then s.cancelEvent(e.name);
  	);
	);
	stages := stages \ {stage};
)
pre stage in set stages				
post stage not in set stages;		

/*
Set name
PRE: name > 0
POS: name changed
*/
public setName: seq of char ==> ()
setName(name_) == (name := name_)
pre len name_ > 0				
post name = name_;			

/*
Set Address
PRE: address > 0
POS:address changed
*/
public setAddress: seq of char ==> ()
setAddress(address_) == (address := address_)
pre len address_ > 0			
post address = address_;	

/*
Reset
*/
public reset: () ==> ()
reset() == (reservations := {})
post reservations = {};
 ---------------------------------------------------------------------------
 functions
 
/*
Equal
*/
public static equal: Space * Space -> bool
equal(s1,s2) == (s1.address = s2.address);
end Space