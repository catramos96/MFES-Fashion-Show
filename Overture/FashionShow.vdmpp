class FashionShow
 types
 	public Stage:: seats:nat1
					name: seq of (char);
 
 instance variables
 	public theme : Utils`String; --/name
  public address : Utils`String;
  public startTime : Utils`Date;
  public endTime : Utils`Date;
  
  public stages: set of (Stage);
  public events : set of (Event);
	public nEntries : map Ticket`TicketType to nat; --Max capacity for each ticket type
	public tickets : set of Ticket;									--Sold
	public workers : set of (Person);
  
  --inv forall e in set events & e.stage in set stages;		-- events in stages belonging to the show
  inv Utils`getDatePosition(startTime,endTime) = <Before>;-- start time < end time
  
 operations
 	--Constructor
 	public FashionShow: Utils`String * Utils`String * Utils`Date * Utils`Date * nat * nat * nat ==> FashionShow
  FashionShow(theme_, address_, startTime_, endTime_, maxVip_, maxNormal_, maxGuest_) == (
  theme := theme_; address := address_; startTime := startTime_; endTime := endTime_; 
  nEntries := {<VIP> |-> maxVip_, <Normal> |-> maxNormal_, <Guest> |-> maxGuest_};
  return self );
  
  --Add Event
  public addEvent: Event ==> ()
  addEvent(e) == (events := events union {e})
  pre (not exists e1 in set events & Event`eventsOverlap(e1,e) = true) and		--PRE: Events don't overlap
  		Utils`getDatePosition(e.startTime,startTime) <> <Before> and 							--PRE: New event between show time
  		Utils`getDatePosition(e.endTime,endTime) <> <After>
  post e in set events;																												--POS: New event in events
  
  --Add Stage
  public addStage: Stage ==> ()
  addStage(s) == (stages:= stages union {s})
  post s in set stages;																												--POS: New stage in stages
  
  --BuyTicket
  public buyTicket: Person * Ticket`TicketType ==> Ticket
  buyTicket(attendee, type) == (
  	dcl t :Ticket := new Ticket(type,attendee, self);
  	tickets := tickets union {t};
  	attendee.addTicket(t);
  	return t;
  )
  pre nEntries(type) > 0													--PRE: Has entries for ticket type
  post (card tickets~) + 1 = (card tickets); 			--POS: Ticket was sold
  
  --Add Worker
  public addWorker: Person * Event ==> ()
  addWorker(w,e) == (
  workers := workers union {w};
  w.addJob(self,e);
  e.addWorker(w)
  )
  pre Person`isWorkingFunction(e.startTime,e.endTime,w.jobs) = false and	--PRE: Person has time to work
  		e in set events																											--PRE: New event belongs to the events of the show
  post w in set workers and w in set e.workers;														--POS: New worker in the show and event workers
  
  functions
  public static showsOverlap: FashionShow * FashionShow -> bool
  showsOverlap(s1,s2) == (s1.address = s2.address and Utils`datesOverlap(s1.startTime,s1.endTime,s2.startTime,s2.endTime));
  
  --Two shows are equal if they have the same theme name
  public static equals: FashionShow * FashionShow -> bool
  equals(s1,s2) == s1.theme = s2.theme;
 

end FashionShow
