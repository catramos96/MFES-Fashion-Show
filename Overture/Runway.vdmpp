class Runway is subclass of Event
types
	public Model :: worker : Person
									cloth : Cloth;
instance variables
	public models : seq of (Model);						
	
	inv forall i in set inds models & models(i).worker in set workers;	--INV: Models are workers
	inv not exists i1,i2 in set inds models & 													--INV: Can't have duplicated models
	i1<>i2 and equalModels(models(i1),models(i2));
	
operations
	--Constructor
	public Runway: Utils`String * Stage * Utils`Date * Utils`Date ==> Runway
	Runway(name_, stage_, startTime_, endTime_) == (
		name := name_;
		stage := stage_;
		startTime := startTime_;
		endTime := endTime_;
		return self
	);
	
	--Add Model to sequence
	public addToSequence: Cloth * Person ==> ()
	addToSequence(cloth,worker) == (
		models := models ^ [mk_Model(worker,cloth)]
	)
	pre worker in set workers and																				--PRE: model must be a worker at an event
	not exists i in set inds models & 
	equalModels(models(i),mk_Model(worker,cloth))											--PRE:Can't have duplicated models
	post exists i in set inds models & equalModels(models(i),mk_Model(worker,cloth));	--POS: Model was added to the sequence
	
	--Removel From Sequence
	public removeFromSequence: Model ==> ()
	removeFromSequence(model) == (
	dcl models_ : seq of Model := [];
	
		for all i in set inds models do(
			if(equalModels(models(i),model) = false) then models_ := models ^ [models(i)];
		);
		
		models := models_;
	)
	post not exists i in set inds models & equalModels(models(i),model);
	
	--Remove Worker Model
	public removeWorkerModel: Person ==> ()
	removeWorkerModel(worker) == (
		dcl models_ : seq of Model := [];
	
		for all i in set inds models do(
			if(models(i).worker <> worker) then models_ := models ^ [models(i)];
		);
		
		models := models_;
	)
	post not exists i in set inds models & models(i).worker = worker;	--POS: Worker is no longer a model
	
	--Dismiss Worker (Override)
		public dismissWorker: Person ==> ()
		dismissWorker(worker) == (
			workers := workers \ {worker};
			worker.removeJob(self);
			if(exists i in set inds models & models(i).worker = worker)
			then removeWorkerModel(worker);
		)
		pre worker in set workers				--PRE: Has worker
		post worker not in set workers and not exists i in set inds models & models(i).worker = worker;	--POS: Worker was dismissed
	
	--Get Cloths
	public getClothes: () ==> set of Cloth
  getClothes() == (
		dcl clothes : set of Cloth := {};
		for all i in set inds models do(
			if(models(i).cloth not in set clothes) then clothes := clothes union {models(i).cloth}
		);
		return clothes
	)
	post forall i in set inds models & models(i).cloth in set RESULT;
		
	--Get Designers
	public getDesigners: () ==> set of Person
	getDesigners() == (
		dcl designers : set of Person := {};
		for all i in set inds models do(
			if(models(i).cloth.designer not in set designers) then designers := designers union {models(i).cloth.designer}
		);
		return designers
	)
	post forall i in set inds models & models(i).worker in set RESULT;
	
	
functions
public equalModels: Model * Model -> bool
equalModels(m1,m2) == (m1.cloth = m2.cloth and m1.worker = m2.worker);
end Runway
