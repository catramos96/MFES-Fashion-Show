class Runway is subclass of Event
instance variables
	public clothes : seq of (Cloth);						
	public models : inmap Person to Cloth;
	
	inv forall m in set dom models & m in set workers;
	inv forall c in seq clothes & c in set rng models;
	inv not exists i1,i2 in set inds clothes & i1<>i2 and clothes(i1) = clothes(i2);
	
operations
	--Constructor
	public Runway: Utils`String * Stage * Utils`Date * Utils`Date ==> Runway
	Runway(name_, stage_, startTime_, endTime_) == (
		name := name_;
		stage := stage_;
		startTime := startTime_;
		endTime := endTime_;
		return self
	);
	
	--Add Cloth
	public addCloth: Cloth * Person ==> ()
	addCloth(cloth,model) == (
		clothes := clothes ^ [cloth];
		models := models ++ {model |-> cloth};
	)
	pre model in set workers and			--PRE: model must be a worker at an event
	not exists i in set inds clothes & clothes(i) = cloth
	and model not in set dom models;
	
	--Remove Cloth
	public removeCloth: Cloth ==> ()
	removeCloth(cloth) == 
	(
		dcl tmp: seq of (Cloth) := clothes,
				tmp2: set of Person := dom models;
		clothes := [];
		
		--Remove clothes
		while(len tmp <> 0) do
		(
			if(hd tmp <> cloth) then (clothes := clothes ^ [(hd tmp)]);
			tmp := tl tmp
		);
		
		--Remove clothes from models
		for all p in set tmp2 do
		(
			if(cloth = models(p)) then (models := models :-> {cloth})
		);
	)
	pre cloth in set elems clothes																					--PRE: Cloth part of runway
	post cloth not in set elems clothes and cloth not in set (rng models);	--POS: Cloth not part of the runway and not associated to  the model
	
	--Swap Order
	public swapOrder: nat1 * nat1 ==> ()
	swapOrder(index1,index2) ==
	(
		dcl c1 : Cloth,	c2 : Cloth;
		
		c1 := clothes(index1);
		c2 := clothes(index2);
		
		clothes := clothes ++ {index1 |-> c2, index2 |-> c1};
	)
	pre index1 in set inds clothes and index2 in set inds clothes										--PRE: Both indexs must belong to the valid indexs
	post clothes(index1) = clothes~(index2) and clothes(index2) = clothes~(index1);	--POS: Cloths were swapped
	
	--Get Designers
	public getDesigners: () ==> set of Person
	getDesigners() == (
		dcl designers : set of Person := {};
		for all c in set rng models do(
			if(c.designer not in set designers) then designers := designers union {c.designer}
		);
		return designers
	)
	post forall d in set RESULT & exists c in seq clothes & c.designer = d;
	
	--Has Cloth
	public hasCloth: Cloth ==> bool
	hasCloth(cloth) == (
		dcl i : int := 1;
		while(i<>(len clothes + 1)) do(
			if(clothes(i) = cloth) then return true;
			i := i + 1;
		);
		return false
	);
end Runway
