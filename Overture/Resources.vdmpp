class Resources
types
	public static TimeType = <Year> | <Month> | <Day> | <Hour> | <Minutes>;
	public static TicketType = <Normal> | <VIP> | <Guest>;
	public static OverlapType = <Total> 
														| <Exact> 
														| <ExactRight> 
														| <ExactLeft> 
														| <Partial>
														| <None>;
														
	public static Date :: year : nat1
												month: nat1
												day : nat1
												hour : nat
												minutes : nat
												inv d == 
													d.month <= 12 and 
													d.day <= DaysOfMonth(d) and
													d.hour <= 23 and
													d.minutes <= 59;
functions

	private static DaysOfMonth(date: Date) number: nat1 == 
	(
		cases date.month:
			1,3,5,7,8,10,12 -> 31,
			4,5,9,11 -> 30,
			2 -> 
			(
				if((date.year mod 4) = 0)
					then 29
				else
					28
			)
		end
	);
		
	private static OverlapNumbers(min1 : nat, max1 : nat, min2 : nat, max2 : nat) overlap:OverlapType == 
		if(min1 = max1 and max2 = max1)
			then <Exact>
		else if ((min1 < min2 and max1 > max2) or (min1 > min2 and max1 < min2))
			then <Total>
		else if(min1 >= min2 and min1 <= max2)
		then
		(
			if(min1 = min2 or min1 = max2)
				then <ExactLeft>
			else
				<Partial>
		)
		else if(max1 >= min2 and max1 <= max2)
		then
		(
			if(max1 = min2 or max1 = max2)
				then <ExactRight>
			else
				<Partial>
		)
		else
			<None>
			;
			
	private static OverlapNumbers(min1 : nat, max1 : nat, min2 : nat, max2 : nat, overlap: OverlapType) overlap:OverlapType ==
		cases overlap:
		<Exact> -> OverlapNumbers(min1,max1,min2,max2),
		<ExactLeft> ->
			if(min1 >= min2 and min1 <= max2)
			then
			(
				if(min1 = min2 or min1 = max2)
					then <ExactLeft>
				else
					<Partial>
			)
			else
				<None>
				,
		<ExactRight> ->
		(
			if(max1 >= min2 and max1 <= max2)
			then
			(
				if(max1 = min2 or max1 = max2)
					then <ExactRight>
				else
					<Partial>
			)
			else
				<None>
		)
		end;
		
	public static DatesOverlapAux(startDate1 : Date, endDate1 : Date, startDate2: Date, endDate2: Date, analysing: TimeType, overlap: OverlapType) overlap:bool ==
	(
		cases analysing:
		<Year> ->
		(
			let type:OverlapType = OverlapNumbers(startDate1.year, endDate1.year, startDate2.year, endDate2.year) 
			in (
						if(type = <None>)
							then false
						else if(type = <Total>)
							then true
						else
							DatesOverlapAux(startDate1,endDate1,startDate2,endDate2,<Month>, type)
					)
		),
		<Month> ->
		(
			let type:OverlapType = OverlapNumbers(startDate1.month, endDate1.month, startDate2.month, endDate2.month,overlap) 
				in (
						if(type = <None>)
							then false
						else if(type = <Total>)
							then true
						else
							DatesOverlapAux(startDate1,endDate1,startDate2,endDate2,<Day>, type)
					)
		),
		<Day> ->
		(
			let type:OverlapType = OverlapNumbers(startDate1.day, endDate1.day, startDate2.day, endDate2.day,overlap) 
				in (
						if(type = <None>)
							then false
						else if(type = <Total>)
							then true
						else
							DatesOverlapAux(startDate1,endDate1,startDate2,endDate2,<Hour>, type)
					)
		),
		<Hour> ->
		(
			let type:OverlapType = OverlapNumbers(startDate1.hour, endDate1.hour, startDate2.hour, endDate2.hour,overlap) 
				in (
						if(type = <None>)
							then false
						else if(type = <Total>)
							then true
						else
							DatesOverlapAux(startDate1,endDate1,startDate2,endDate2,<Minutes>, type)
					)
		),
		<Minutes> ->
		(
			let type:OverlapType = OverlapNumbers(startDate1.month, endDate1.month, startDate2.month, endDate2.month,overlap) 
				in (
						if(type = <None>)
							then false
						else
							false
					)
		)
		end
	);
	
	public static DatesOverlap(startDate1 : Date, endDate1 : Date, startDate2: Date, endDate2 : Date) overlap:bool ==
		DatesOverlapAux(startDate1,endDate1,startDate2,endDate2,<Year>,<None>)

end Resources	
