class TestDate

 operations

 private testDatePosition: () ==> ()
 testDatePosition() == (
 -- d1-d2 include d2-d4 fully
	 dcl d1: Utils`Date := mk_Utils`Date(1997,02,14,20,55);
 	 dcl d2: Utils`Date := mk_Utils`Date(1997,02,14,21,55);
 	 
 	 dcl p1: Utils`DatePosition, p2: Utils`DatePosition, p3: Utils`DatePosition;
 	 -- Position
 	 p1 := Utils`getDatePosition(d1,d2);
 	 p2 := Utils`getDatePosition(d2,d1);
 	 p3 := Utils`getDatePosition(d1,d1);
 	 
 	 Utils`expecting(p1,<Before>);
 	 Utils`expecting(p2,<After>);
 	 Utils`expecting(p3,<Same>);
 );
 
 private testDatesOverlap: () ==> ()
 testDatesOverlap() == (
 	dcl d1: Utils`Date := mk_Utils`Date(1997,02,14,20,55); --- 1º
 	dcl d2: Utils`Date := mk_Utils`Date(1997,02,15,12,00); --- 2º
 	dcl d3: Utils`Date := mk_Utils`Date(1997,02,28,00,00); --- 3º
 	dcl d4: Utils`Date := mk_Utils`Date(1997,03,1,00,00);  --- 4º
 	
 	dcl b1:bool, b2:bool, b3:bool, b4:bool, b5:bool, b6:bool, b7:bool;
 	
 	b1 := Utils`datesOverlap(d1,d4,d2,d3);	 	-- Situation:  ---s1---s2---e2---e1   : overlap
 	b2 := Utils`datesOverlap(d1,d3,d2,d4);		-- Situation:  ---s1---s2---e1---e2   : overlap
 	b3 := Utils`datesOverlap(d1,d2,d3,d4);		-- Situation:  ---s1---e1---s2---e2   : no
 	b4 := Utils`datesOverlap(d1,d2,d2,d3);		-- Situation:  ---s1---e1s1---e2			: no
 	b5 := Utils`datesOverlap(d2,d3,d1,d4);		-- Situation:  ---s2---s1---e1---e2   : overlap
 	b6 := Utils`datesOverlap(d2,d4,d1,d3);		-- Situation:  ---s2---s1---e2---e1   : overlap
 	b7 := Utils`datesOverlap(d1,d2,d1,d2);		-- Situation:  ---s1s2---e1e2					: overlap 	
 	
 	Utils`expecting(b1,true);
 	Utils`expecting(b2,true);
 	Utils`expecting(b3,false);
 	Utils`expecting(b4,false);
 	Utils`expecting(b5,true);
 	Utils`expecting(b6,true);
 	Utils`expecting(b7,true);
 );
 
 public static main: () ==> ()
 main() == (
  dcl t: TestDate := new TestDate();
  t.testDatePosition();
	t.testDatesOverlap();
 );
 
end TestDate